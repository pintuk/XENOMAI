From 6fab52f5f507e8f4fee5c5a333db6341817dcc90 Mon Sep 17 00:00:00 2001
From: Pintu Kumar <pintu.kumar@sony.com>
Date: Thu, 23 Aug 2018 23:27:37 +0900
Subject: [PATCH] demo/alchemy: add simple-task demo application

This is a simple demo application to demonstrate latency measurement
across real-time task execution.
It supports the following functionality:
* Multi-threading latency measurement capability.
* Options to specify number of samples for each task.
* Measure latency difference for each sample and store results.
* Display latency data in the form of cyclictest results.
* Helpful in easily plotting a graphical view of latency data
  using a simple script and gnuplot command.

Signed-off-by: Pintu Kumar <pintu.kumar@sony.com>
---
 configure.ac                                |   1 +
 demo/alchemy/Makefile.am                    |   2 +-
 demo/alchemy/simple-task/Makefile.am        |  22 +++
 demo/alchemy/simple-task/simple_xeno_task.c | 238 ++++++++++++++++++++++++++++
 4 files changed, 262 insertions(+), 1 deletion(-)
 create mode 100644 demo/alchemy/simple-task/Makefile.am
 create mode 100644 demo/alchemy/simple-task/simple_xeno_task.c

diff --git a/configure.ac b/configure.ac
index 4f9b1f9..afc9156 100644
--- a/configure.ac
+++ b/configure.ac
@@ -923,6 +923,7 @@ AC_CONFIG_FILES([ \
 	demo/posix/cobalt/Makefile \
 	demo/alchemy/Makefile \
 	demo/alchemy/cobalt/Makefile \
+	demo/alchemy/simple-task/Makefile \
 	include/Makefile \
 	include/cobalt/uapi/Makefile \
 	include/cobalt/uapi/asm-generic/Makefile \
diff --git a/demo/alchemy/Makefile.am b/demo/alchemy/Makefile.am
index 80def4f..7799769 100644
--- a/demo/alchemy/Makefile.am
+++ b/demo/alchemy/Makefile.am
@@ -3,7 +3,7 @@ demodir = @XENO_DEMO_DIR@
 demo_PROGRAMS = altency
 
 if XENO_COBALT
-SUBDIRS = cobalt
+SUBDIRS = cobalt simple-task
 endif
 
 cppflags = 				\
diff --git a/demo/alchemy/simple-task/Makefile.am b/demo/alchemy/simple-task/Makefile.am
new file mode 100644
index 0000000..6ad7e95
--- /dev/null
+++ b/demo/alchemy/simple-task/Makefile.am
@@ -0,0 +1,22 @@
+demodir = @XENO_DEMO_DIR@
+
+CCLD = $(top_srcdir)/scripts/wrap-link.sh $(CC)
+
+demo_PROGRAMS = simple_xeno_task
+
+cppflags = 			\
+	$(XENO_USER_CFLAGS)	\
+	-I$(top_srcdir)/include
+
+ldadd = 					\
+	@XENO_AUTOINIT_LDFLAGS@			\
+	$(XENO_POSIX_WRAPPERS)			\
+	../../../lib/alchemy/libalchemy.la 	\
+	../../../lib/copperplate/libcopperplate.la \
+	@XENO_CORE_LDADD@			\
+	@XENO_USER_LDADD@			\
+	-lrt -lpthread -lm
+
+simple_xeno_task_SOURCES = simple_xeno_task.c
+simple_xeno_task_CPPFLAGS = $(cppflags)
+simple_xeno_task_LDADD = $(ldadd)
diff --git a/demo/alchemy/simple-task/simple_xeno_task.c b/demo/alchemy/simple-task/simple_xeno_task.c
new file mode 100644
index 0000000..ed987ff
--- /dev/null
+++ b/demo/alchemy/simple-task/simple_xeno_task.c
@@ -0,0 +1,238 @@
+/*
+ * simple_xeno_task.c
+ *
+ * This is a simple userspace test program to demonstrate latency measurement
+ * across real-time task, using Xenomai alchemy skin.
+ * It supports the following functionality:
+ * Multi-threading latency measurement capability.
+ * Options to specify number of samples for each task.
+ * Measure latency difference for each sample and store results.
+ * Display latency data in the form of cyclictest results.
+ * Helpful in easily plotting a graphical view of latency data
+ * using a simple script and gnuplot command.
+ *
+ * Copyright 2018 by Pintu Kumar <pintu.kumar@sony.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <limits.h>
+#include <sys/mman.h>
+#include <alchemy/task.h>
+#include <alchemy/timer.h>
+
+#define MAX_THREADS	1
+#define ONE_SECOND	1000000000ULL
+#define NANO_SECOND	1000000000ULL
+#define MICRO_SECOND	1000000.00
+#define MILLI_SECOND	1000.00
+
+#define MILLI_SEC(x)    ((x) * MICRO_SECOND)
+#define MICRO_SEC(x)    ((x) * MILLI_SECOND)
+
+/* Task sleep duration in micro-seconds */
+#define SLEEP_DURATION	(100)
+
+/* This denotes the number of samples */
+int n;
+
+struct task_data {
+	float *latency;
+	float min_latency;
+	float max_latency;
+	float avg_latency;
+} data[MAX_THREADS+1];
+
+
+/* This function returns time difference in micro-seconds */
+static inline float timediff(RTIME t1, RTIME t2)
+{
+	float diff;
+
+	diff = (t2 - t1) / MILLI_SECOND;
+
+	return diff;
+}
+
+/* This is a dummy function, which actually does nothing
+ * It just allows us to sleep for a duration specified by value.
+ */
+static void do_something(int value, int taskno)
+{
+	int ret;
+	//RTIME delay;
+
+	/* Sometimes rt_task_wait_period may also fail.
+	 * At that time huge negative latency can be seen.
+	 * Thus it is better to check failure case.
+	 */
+	ret = rt_task_wait_period(NULL);
+	if (ret < 0)
+		rt_printf("rt_task_wait_period - failed, task: %d\n", taskno);
+
+	/* We can also use below to create delay.
+	 * Latency values might differ slightly.
+	 */
+	//delay = MICRO_SEC(value);
+	//rt_task_sleep(delay);
+}
+
+/* This is the real task function that gets called when rt task starts.
+ * The argument here indicates the task number.
+ */
+static void TaskFunction(void *arg)
+{
+	int i, taskno, ret;
+	float max, min, avg_latency, max_latency, min_latency;
+	float diff, total_diff = 0.0;
+	RTIME prev, now;
+
+	if (!arg)
+		return;
+
+	taskno = *(int *)arg;
+
+	max = (float)INT_MIN;
+	min = (float)INT_MAX;
+
+	ret = rt_task_set_periodic(NULL, TM_NOW, MICRO_SEC(SLEEP_DURATION));
+	if (ret < 0)
+		rt_printf("rt_task_set_periodic - failed, task: %d\n", taskno);
+
+	printf("Task: %d, Iteration: %d, Sleep duration: %d us\n", taskno, n,
+					(int)SLEEP_DURATION);
+
+	for (i = 1; i <= n; i++) {
+		prev = rt_timer_read();
+		do_something(SLEEP_DURATION, taskno);
+		now = rt_timer_read();
+
+		diff = timediff(prev, now);
+		data[taskno].latency[i] = diff;
+		total_diff += diff;
+
+		if (diff > max)
+			max = diff;
+		if (diff < min)
+			min = diff;
+	}
+
+	avg_latency = (total_diff / n) - (SLEEP_DURATION);
+	data[taskno].avg_latency = avg_latency;
+	max_latency = max - (SLEEP_DURATION);
+	data[taskno].max_latency = max_latency;
+	min_latency = min - (SLEEP_DURATION);
+	data[taskno].min_latency = min_latency;
+}
+
+static void show_latency(void)
+{
+	int i, j;
+
+	for (i = 0; i < MAX_THREADS; i++) {
+		for (j = 1; j <= n; j++) {
+			float latency;
+
+			if (data[i].latency == NULL)
+				continue;
+
+			latency = data[i].latency[j] - (SLEEP_DURATION);
+			printf("%d %5.3f %5.3f\n",
+					j, data[i].latency[j], latency);
+		}
+		printf("Task[%d] - Min Latency: %5.3f us\n",
+					i, data[i].min_latency);
+		printf("Task[%d] - Max Latency: %5.3f us\n",
+					i, data[i].max_latency);
+		printf("Task[%d] - Avg Latency: %5.3f us\n",
+					i, data[i].avg_latency);
+		printf("\n");
+
+		if (data[i].latency != NULL)
+			free(data[i].latency);
+	}
+}
+
+int main(int argc, char *argv[])
+{
+	int i;
+	RT_TASK tid[MAX_THREADS+1];
+
+	if (argc < 2) {
+		printf("Usage: ./%s <number of iterations>\n", argv[0]);
+		return -1;
+	}
+
+	mlockall(MCL_CURRENT|MCL_FUTURE);
+
+	n = atoi(argv[1]);
+
+	if (n <= 0)
+		return -1;
+
+	/* Create thread with same thread function */
+	for (i = 0; i < MAX_THREADS; i++) {
+		int err;
+		int priority;
+		char name[32];
+
+		data[i].latency = (float *)malloc(sizeof(float)*n+1);
+		if (data[i].latency == NULL) {
+			printf("Cannot allocate memory for: data[%d]\n", i);
+			return -1;
+		}
+
+		/* Caution: Do not choose priority greater than 99.
+		 * So make sure to adjust the MAX_THREADS value accordingly
+		 */
+		priority = 99 - i;
+		snprintf(name, sizeof(name), "task%d", i);
+		printf("main: creating task name: %s, priority: %d\n",
+					name, priority);
+
+		/* Note: Here T_JOINABLE is important.
+		 * If you dont specify this then rt_task_join will not wait
+		 */
+		err = rt_task_create(&tid[i], name, 0, priority, T_JOINABLE);
+		if (err) {
+			printf("rt_task_create - Failed, err = %d\n", err);
+			return -1;
+		}
+
+		err = rt_task_start(&tid[i], &TaskFunction, &i);
+		if (err) {
+			printf("rt_task_start - Failed, err = %d\n", err);
+			rt_task_delete(&tid[i]);
+			return -1;
+		}
+	}
+
+	/* Synchronize the completion of each thread. */
+	for (i = 0; i < MAX_THREADS; i++) {
+		/* Note: It should be used along with T_JOINABLE option */
+		rt_task_join(&tid[i]);
+	}
+
+	/* Display latency measurement data for each task */
+	show_latency();
+
+	printf("ALL FINISHED.......!!!\n");
+
+	return 0;
+}
-- 
2.7.4

